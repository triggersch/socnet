<?php

namespace OCPlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{

	public function myFindAll()
	{
		//$queryBuilder = $this->_em->createQueryBuilder()->select('a')->from( $this->_entityName, 'a');

		$queryBuilder = $this->createQueryBuilder('a');

		$query = $queryBuilder->getQuery();

		$results = $query->getResult();
		return $results;
	}

	public function myFindOne($id)
	{
		
		$queryBuilder = $this->createQueryBuilder('a');

		$queryBuilder->where('a.id = :id')->setParameter('id', $id);

		return  $queryBuilder->getQuery()->getResult();
	}

	public function findByAuthorAndDate($author, $year)
	{
		
		$queryBuilder = $this->createQueryBuilder('a');

		$queryBuilder->where('a.author = :author')->setParameter('author', $author)
		             ->andWhere('a.date < :year')->setParameter('year', $year)
		             ->orderBy('a.date','DESC');

		return  $queryBuilder->getQuery()->getResult();
	}

	public function whereCurrentYear(QueryBuilder $qb)
	{

		$qb->andWhere('a.date BETWEEN :start AND :end')
		    ->setParameter('start', new \Datetime( date('Y').'-01-01') )
		    ->setParameter('end', new \Datetime( date('Y').'-12-31') );
		
	}

	public function myFind()
	{
		
		$queryBuilder = $this->createQueryBuilder('a');

		$queryBuilder->where('a.author = :author')->setParameter('author', 'Marine');

		$this->whereCurrentYear($queryBuilder);

		$queryBuilder->orderBy('a.date','DESC');

		return $queryBuilder->getQuery()->getResult();
	}

	public function getAdvertWithApplications()
	{
		
		$queryBuilder = $this->createQueryBuilder('a')
		                     ->leftJoin('a.applications', 'app')
		                     ->addSelect('app');

		
		return $queryBuilder->getQuery()->getResult();
	}

	public function getAdvertWithCategories(array $categoryNames)
	{
		
		$queryBuilder = $this->createQueryBuilder('a')
		                     ->join('a.categories', 'c')
		                     ->addSelect('c');

		$queryBuilder->where( $queryBuilder->expr()->in('c.name', $categoryNames));

		
		return $queryBuilder->getQuery()->getResult();
	}

	public function getApplicationsWithAdvert($limit)
	{
		
		$queryBuilder = $this->createQueryBuilder('a')
		                     ->leftJoin('a.advert', 'adv')
		                     ->addSelect('adv');

		$queryBuilder->setMaxResults($limit);

		
		return $queryBuilder->getQuery()->getResult();
	}

	public function getAdverts($page, $nbPerPages)
	{
		
		$query = $this->createQueryBuilder('a')
							 ->leftJoin('a.image', 'i')
							 ->addSelect('i')
							 ->leftJoin('a.categories', 'c')
							 ->addSelect('c')
							 ->orderBy('a.date', 'DESC')
		                     ->getQuery();

		$query->setFirstResult( ($page -1 )*$nbPerPages)
		      ->setMaxResults($nbPerPages);

			
		return new Paginator($query, true);
	}

	public function getPublishedQueryBuilder()
	{
		return $this->createQueryBuilder('a')
					->where('a.published = :published')
		       		->setParameter('published',true);
	}

}
